#+title: Config
* Doom Configurations
** Doom config options
Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

** Personal Info

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Aidan Scannell"
      user-mail-address "scannell.aidan@gmail.com")
#+end_src

** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept. For example:
#+begin_src emacs-lisp :tangle yes
;; (setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
#+end_src

If you or Emacs can't find your font, use 'M-x describe-font' to look them
up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src emacs-lisp :tangle yes
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-dracula)
(setq doom-theme 'doom-laserwave)
;; (setq doom-theme 'doom-moonlight)
;; (setq doom-theme 'doom-monokai)
;; (setq doom-theme 'doom-wilmersdorf)
#+end_src

** Line numbers
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

** Set org-directory
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp :tangle yes
(setq org-directory (concat (getenv "HOME")"/Library/Mobile Documents/com~apple~CloudDocs/org"))
;; (setq org-directory "~/Dropbox/org")
#+end_src

* Custom Configurations
** Set variables
#+begin_src emacs-lisp :tangle yes
(setq zot_bib (concat org-directory "/ref/zotero-library.bib")
      ;; org_ref_bib (concat (getenv "HOME") "/Dropbox/org/ref/org-ref-library.bib")
      org_notes org-directory
      org_contacts (concat org-directory "/contacts.org"))
#+end_src
** Org mode
*** org-projectile
#+begin_src emacs-lisp :tangle packages.el
(package! org-projectile)
#+end_src
#+begin_src emacs-lisp :tangle yes
(after! org
  (use-package! org-projectile
    :config
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "todo.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    ;; (setq org-projectile-projects-file "~/Dropbox/org/project_todos.org")
    (setq org-projectile-projects-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/project_todos.org")
    (push (org-projectile-project-todo-entry) org-capture-templates)
    ;; (global-set-key (kbd "C-c c") 'org-capture)
    ;; (global-set-key (kbd "C-c n p") 'org-projectile-project-todo-completing-read)))
    ;; :init
    ;; (org-projectile-per-project)
    ;; (setq org-projectile-per-project-filepath "project_todos.org")
    ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    ;; (setq org-projectile-projects-file "~/Dropbox/org/project_todos.org")
    ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    ;; (push (org-projectile-project-todo-entry) org-capture-templates)
    ;; (global-set-key (kbd "C-c c") 'org-capture)
    ;; (global-set-key (kbd "C-c n p") 'org-projectile-project-todo-completing-read)))

    (setq org-contacts-files org_contacts
          org-todo-keywords '((sequence "SOMEDAY" "TODO" "PROGRESS" "|" "DONE" "DELEGATED" "CANCELLED"))
          ;;  ;; org-default-notes-file "~/Dropbox/org/notes.org"
          org-startup-indented t ;; Keep the indentation well structured
          org-bullets-bullet-list '("■" "◆" "▲" "▶"))))
#+end_src

*** org ref
#+begin_src emacs-lisp :tangle packages.el
(package! org-ref)
#+end_src
Setup org-ref to use zotero bib file in cloud
#+begin_src emacs-lisp :tangle yes
(after! org
    (use-package! org-ref
      :config
      (setq org-ref-default-bibliography '(zot_bib))))
#+end_src

*** Set up ignore headings tag
Import ignore-headlines to allow a headline (but not its children) to
be ignored.  Any headline tagged with the 'ignore' tag will be
ignored (i.e. will not be included in the export), but any child
headlines will not be ignored (unless explicitly tagged to be
ignored), and will instead have their levels promoted by one.
#+begin_src emacs-lisp :tangle packages.el
(package! org-contrib)
#+end_src
#+begin_src emacs-lisp :tangle yes
(after! org
    (use-package! org-contrib
      :config
      (require 'ox-extra)
      (ox-extras-activate '(latex-header-blocks ignore-headlines))))
    ;; (use-package! ox-extra
    ;;   :config
    ;;   (ox-extras-activate '(latex-header-blocks ignore-headlines)))
#+end_src

*** org latex
#+begin_src emacs-lisp :tangle yes
(after! org
    (use-package! ox-latex
      :config
      (setq org-latex-pdf-process
            '("latexmk -interaction=nonstopmode -output-directory=./tex -output-format=pdf %f"))))
      ;; '("latexmk -f -silent -output-directory=./tex -output-format=pdf %f \n cp ./tex/%b.pdf ./%b.pdf"))
      ;; (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
      ;; (setq org-latex-prefer-user-labels t)
#+end_src

*** org-babel
#+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (ipython . t)
   (elisp . t)
   (latex . t)
   (org . t)))
#+end_src

** Format
Disable formatter from lsp so that (format +onsave)
#+begin_src emacs-lisp :tangle yes
;; (setq +format-with-lsp nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
;; (setq-hook! 'python-mode-hook +format-with 'html-tidy)
;; (setq-hook! 'python-mode-hook +format-with :none)
#+end_src

#+begin_src emacs-lisp :tangle yes
(defvar +format-on-save-enabled-modes
  '(not emacs-lisp-mode    ; elisp's mechanisms are good enough
        sql-mode           ; sqlformat is currently broken
        tex-mode           ; latexindent is broken
        latex-mode
        html-mode
        org-msg-edit-mode) ; doesn't need a formatter
  )
#+end_src

** Spacemacs Keybindings
Change meta to use SPC like spacemacs
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:desc "M-x" "SPC"  #'execute-extended-command)
      (:desc "M-x" "C-SPC"  #'execute-extended-command))
#+end_src

avy jump like spacemacs
#+begin_src emacs-lisp :tangle yes
(after! avy
  (map! :leader
        (:prefix-map ("j" . "jump")
         :desc "jump to char" "j"  #'avy-goto-char-2
         :desc "jump to word" "w"  #'avy-goto-word-0
         :desc "jump to line" "l"  #'avy-goto-line
         :desc "jump to url" "u"   #'avy-goto-url
         :desc "imenu" "i"  #'counsel-imenu
         :desc "switch-buffer" "b"  #'+ivy/switch-workspace-buffer
         :desc "goto-last-change" "c"  #'goto-last-change
         :desc "find-function" "f"  #'find-function
         :desc "find-variable" "v"  #'find-variable
         )))
#+end_src

Comment lines with SPC ;;
#+begin_src emacs-lisp :tangle yes
(map! :after evil
      :leader
      :desc "comment lines" ";" 'evilnc-comment-or-uncomment-lines)
#+end_src

Deleted other window using SPC w D
#+begin_src emacs-lisp :tangle yes
(map! :map evil-window-map
      :desc "delete other window" "D" #'ace-delete-window)
#+end_src

Change workspaces to "layouts" using l instead of using TAB
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("l" . "layouts")
       :desc "previos" "k"  #'+workspace/switch-left
       :desc "next" "j"  #'+workspace/switch-right
       :desc "switch" "l"  #'+workspace/switch-to
       :desc "delete" "d"  #'+workspace/delete
       :desc "new" "n"  #'+workspace/new
       ))
#+end_src

** Dired
#+begin_src emacs-lisp :tangle yes
;; TODO update these to not use dropbox
;; dired quick links
(defun my/open-config () (interactive) (dired "/Users/scannea1/.config"))
(defun my/open-dotfiles() (interactive) (dired "/Users/scannea1/.dotfiles"))
(defun my/open-python-projects () (interactive) (dired "/Users/scannea1/Developer/python-projects"))
(defun my/open-home () (interactive) (dired "/Users/scannea1"))
(defun my/open-documents () (interactive) (dired "/Users/scannea1/Documents"))
(defun my/open-emacs () (interactive) (dired doom-private-dir))
(defun my/open-downloads () (interactive) (dired "/Users/scannea1/Downloads"))
(defun my/open-notes () (interactive) (dired "/Users/scannea1/Dropbox/org"))

(map! :after dired
      :map dired-mode-map
      :ng "h" #'dired-up-directory
      :ng "l" #'dired-find-file)

(map! :after dired
      :leader
      (:prefix-map ("d" . "dired")
       :desc "~/.dotfiles" "c"  #'my/open-config
       :desc "~/dotfiles" "g"  #'my/open-dotfiles
       :desc "here" "d"  #'dired-jump
       :desc "emacs" "e"  #'my/open-emacs
       :desc "~/Documents" "D"  #'my/open-documents
       :desc "~/" "h"  #'my/open-home
       :desc "~/Downloads" "o"  #'my/open-downloads
       :desc "python-projects" "p"  #'my/open-python-projects
       :desc "notes" "n"  #'my/open-notes
       ))

(after! evil
  (after! dired-ranger
    (evil-collection-define-key 'normal 'dired-mode-map
      ;; "h" 'dired-single-up-directory
      "H" 'dired-omit-mode
      ;; "l" 'dired-single-buffer
      "y" 'dired-ranger-copy
      "X" 'dired-ranger-move
      "p" 'dired-ranger-paste)))
#+end_src

Change ls to gls for grouping by directories on osx
#+begin_src emacs-lisp :tangle yes
;; (setq insert-directory-program "gls" dired-use-ls-dired t)
#+end_src

Make dired list directories first
#+begin_src emacs-lisp :tangle yes
(setq dired-listing-switches "-agho --group-directories-first")
#+end_src
Make dired-omit-mode hide dotfiles
#+begin_src emacs-lisp :tangle yes
(setq dired-omit-files "^\\.[^.].*")
#+end_src

#+begin_src emacs-lisp :tangle yes
;; (setq dired-omit-verbose nil)
#+end_src

** LaTeX
#+begin_src emacs-lisp :tangle yes
;; (add-hook pdf-view-mode-hook 'auto-revert-mode)
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; Config for doom latex lang
(after! reftex
  (setq reftex-default-bibliography zot_bib))

;; (setq +latex-viewers '(pdf-tools preview))
#+end_src
